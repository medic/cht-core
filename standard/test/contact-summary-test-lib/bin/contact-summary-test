#!/usr/bin/env node
const assert = require('chai').assert;
const fs = require('../src/lib/sync-fs');
const info = require('../src/lib/log').info;
const Script = require('vm').Script;
const trace = require('../src/lib/log').trace;
const warn = require('../src/lib/log').warn;

const contactSummaryFile = process.argv[2];
const testDir = process.argv[3];
info('Loading tests from dir', testDir);

const contactSummarySrc = fs.read(contactSummaryFile);

const contactSummary = new Script(`
(function() {
  ${contactSummarySrc}
}())
`);

const failures = [];
let testCount = 0;

fs.readdir(testDir)
  .filter(name => fs.isDirectory(`${testDir}/${name}`))
  .forEach(testName => {
    ++testCount;
    try {
      const dir = `${testDir}/${testName}`;
      trace('Running test for dir:', dir);

      const expectedOutput = fs.readJson(`${dir}/expected-output.json`);

      const testContext = {
        contact: fs.readJson(`${dir}/contact.json`),
        lineage: fs.readJson(`${dir}/lineage.json`),
        reports: fs.readJson(`${dir}/reports.json`),
      };
      const actualOutput = contactSummary.runInNewContext(testContext);

      assert.deepEqual(
          JSON.parse(JSON.stringify(actualOutput)), // IGNORE UNDEFINED VALUES
          expectedOutput,
          `Not equal:
  EXPECTED: ${JSON.stringify(expectedOutput)}
  ACTUAL:   ${JSON.stringify(actualOutput)}
    (Note: ordering of this output is not guaranteed, but content of objects is compared with assert.deepEqual())
`);

      console.log(`    ✅  ${testName}`);
    } catch(e) {
      console.log(`    ❌  ${testName}`);
      warn(testName, 'FAILED');
      console.log(e);
      failures.push(testName);
    }
  });

info(`Executed ${testCount} tests (${failures.length} failed).`);

if(failures.length) {
  warn(`${failures.length} tests failed.`);
  process.exit(1);
} else {
  info('All tests passed :¬)');
}
