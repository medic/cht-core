{
  "docs": [
    {
      "_id": "_design/medic-client",
      "validate_doc_update": "function(newDoc, oldDoc, userCtx, secObj) {\n  /*\n    LOCAL DOCUMENT VALIDATION\n\n    This is for validating document structure, irrespective of authority, so it\n    can be run both on couchdb and pouchdb (where you are technically admin).\n\n    For validations around authority check lib/validate_doc_update.js, which is\n    only run on the server.\n  */\n\n  var _err = function(msg) {\n    throw({ forbidden: msg });\n  };\n\n  /**\n   * Ensure that type='form' documents are created with correctly formatted _id\n   * property.\n   */\n  var validateForm = function(newDoc) {\n    var id_parts = newDoc._id.split(':'),\n        prefix = id_parts[0],\n        form_id = id_parts.slice(1).join(':');\n    if (prefix !== 'form') {\n      _err('_id property must be prefixed with \"form:\". e.g. \"form:registration\"');\n    }\n    if (!form_id) {\n      _err('_id property must define a value after \"form:\". e.g. \"form:registration\"');\n    }\n    if (newDoc._id !== newDoc._id.toLowerCase()) {\n      _err('_id property must be lower case. e.g. \"form:registration\"');\n    }\n  };\n\n  var validatePerson = function(newDoc) {\n    if(!newDoc.reported_date) {\n      _err('reported_date property must be set.');\n    }\n  };\n\n  var validateUserSettings = function(newDoc) {\n    var id_parts = newDoc._id.split(':'),\n        prefix = id_parts[0],\n        username = id_parts.slice(1).join(':'),\n        idExample = ' e.g. \"org.couchdb.user:sally\"';\n    if (prefix !== 'org.couchdb.user') {\n      _err('_id must be prefixed with \"org.couchdb.user:\".' + idExample);\n    }\n    if (!username) {\n      _err('_id must define a value after \"org.couchdb.user:\".' + idExample);\n    }\n    if (newDoc._id !== newDoc._id.toLowerCase()) {\n      _err('_id must be lower case.' + idExample);\n    }\n    if (typeof newDoc.name === 'undefined' || newDoc.name !== username) {\n      _err('name property must be equivalent to username.' + idExample);\n    }\n    if (newDoc.name.toLowerCase() !== username.toLowerCase()) {\n      _err('name must be equivalent to username');\n    }\n    if (typeof newDoc.known !== 'undefined' && typeof newDoc.known !== 'boolean') {\n      _err('known is not a boolean.');\n    }\n    if (typeof newDoc.roles !== 'object') {\n      _err('roles is a required array');\n    }\n  };\n\n  if (userCtx.facility_id === newDoc._id) {\n    _err('You are not authorized to edit your own place');\n  }\n  if (newDoc.type === 'person') {\n    validatePerson(newDoc);\n  }\n  if (newDoc.type === 'form') {\n    validateForm(newDoc);\n  }\n  if (newDoc.type === 'user-settings') {\n    validateUserSettings(newDoc);\n  }\n\n  log('medic-client validate_doc_update passed for User \"' + userCtx.name + '\" changing document \"' +  newDoc._id + '\"');\n}",
      "views": {
        "contacts_by_freetext": {
          "map": "function(doc) {\n  var skip = [ '_id', '_rev', 'type', 'refid', 'geolocation' ];\n\n  var usedKeys = [];\n  var emitMaybe = function(key, value) {\n    if (usedKeys.indexOf(key) === -1 && // Not already used\n        key.length > 2 // Not too short\n    ) {\n      usedKeys.push(key);\n      emit([key], value);\n    }\n  };\n\n  var emitField = function(key, value, order) {\n    if (!key || !value) {\n      return;\n    }\n    key = key.toLowerCase();\n    if (skip.indexOf(key) !== -1 || /_date$/.test(key)) {\n      return;\n    }\n    if (typeof value === 'string') {\n      value = value.toLowerCase();\n      value.split(/\\s+/).forEach(function(word) {\n        emitMaybe(word, order);\n      });\n    }\n    if (typeof value === 'number' || typeof value === 'string') {\n      emitMaybe(key + ':' + value, order);\n    }\n  };\n\n  var types = [ 'district_hospital', 'health_center', 'clinic', 'person' ];\n  var idx = types.indexOf(doc.type);\n  var dead = !!doc.date_of_death;\n  if (idx !== -1) {\n    var order = dead + ' ' + idx + ' ' + (doc.name && doc.name.toLowerCase());\n    Object.keys(doc).forEach(function(key) {\n      emitField(key, doc[key], order);\n    });\n    var clinic = doc.type === 'person' ? doc.parent : doc;\n    if (clinic && clinic._id) {\n      emitMaybe('clinic:' + clinic._id, order);\n    }\n  }\n}"
        },
        "contacts_by_last_visited": {
          "map": "function(doc) {\n  if (doc.type === 'data_record' &&\n      doc.form &&\n      doc.fields &&\n      doc.fields.visited_contact_uuid) {\n\n    // Is a visit report about a family\n    emit(doc.fields.visited_contact_uuid, doc.reported_date);\n  } else if (doc.type === 'clinic') {\n    // Is a family\n    emit(doc._id, 0);\n  }\n}",
          "reduce": "_stats"
        },
        "contacts_by_parent": {
          "map": "function(doc) {\n  if (doc.type === 'clinic' ||\n      doc.type === 'health_center' ||\n      doc.type === 'district_hospital' ||\n      doc.type === 'person') {\n    var parentId = doc.parent && doc.parent._id;\n    if (parentId) {\n      emit(parentId);\n    }\n  }\n}"
        },
        "contacts_by_phone": {
          "map": "function(doc) {\n  if (doc.phone) {\n    var types = [ 'district_hospital', 'health_center', 'clinic', 'person' ];\n    if (types.indexOf(doc.type) !== -1) {\n      emit(doc.phone);\n    }\n  }\n}"
        },
        "contacts_by_reference": {
          "map": "function(doc) {\n  if (doc.type === 'clinic' ||\n      doc.type === 'health_center' ||\n      doc.type === 'district_hospital' ||\n      doc.type === 'national_office' ||\n      doc.type === 'person') {\n\n    var emitReference = function(prefix, key) {\n      emit([ prefix, String(key) ], doc.reported_date);\n    };\n\n    if (doc.place_id) {\n      emitReference('shortcode', doc.place_id);\n    }\n    if (doc.patient_id) {\n      emitReference('shortcode', doc.patient_id);\n    }\n    if (doc.simprints_id) {\n      emitReference('simprints', doc.simprints_id);\n    }\n    if (doc.rc_code) {\n      // need String because rewriter wraps everything in quotes\n      // keep refid case-insenstive since data is usually coming from SMS\n      emitReference('external', String(doc.rc_code).toUpperCase());\n    }\n  }\n}"
        },
        "contacts_by_type_index_name": {
          "map": "function(doc) {\n  var types = [ 'district_hospital', 'health_center', 'clinic', 'person' ];\n  var idx = types.indexOf(doc.type);\n  var dead = !!doc.date_of_death;\n  if (idx !== -1) {\n    var name = doc.name && doc.name.toLowerCase();\n    var order = dead + ' ' + idx + ' ' + name;\n    emit([ order ], name);\n  }\n}"
        },
        "contacts_by_type_freetext": {
          "map": "function(doc) {\n  var skip = [ '_id', '_rev', 'type', 'refid', 'geolocation' ];\n\n  var usedKeys = [];\n  var emitMaybe = function(key, value) {\n    if (usedKeys.indexOf(key) === -1 && // Not already used\n        key.length > 2 // Not too short\n    ) {\n      usedKeys.push(key);\n      emit([doc.type, key], value);\n    }\n  };\n\n  var emitField = function(key, value, order) {\n    if (!key || !value) {\n      return;\n    }\n    key = key.toLowerCase();\n    if (skip.indexOf(key) !== -1 || /_date$/.test(key)) {\n      return;\n    }\n    if (typeof value === 'string') {\n      value = value.toLowerCase();\n      value.split(/\\s+/).forEach(function(word) {\n        emitMaybe(word, order);\n      });\n    }\n    if (typeof value === 'number' || typeof value === 'string') {\n      emitMaybe(key + ':' + value, order);\n    }\n  };\n\n  var types = [ 'district_hospital', 'health_center', 'clinic', 'person' ];\n  var dead = !!doc.date_of_death;\n  var idx = types.indexOf(doc.type);\n  if (idx !== -1) {\n    var order = dead + ' ' + idx + ' ' + (doc.name && doc.name.toLowerCase());\n    Object.keys(doc).forEach(function(key) {\n      emitField(key, doc[key], order);\n    });\n    var clinic = doc.type === 'person' ? doc.parent : doc;\n    if (clinic && clinic._id) {\n      emitMaybe('clinic:' + clinic._id, order);\n    }\n  }\n}"
        },
        "contacts_by_type": {
          "map": "function(doc) {\n  var types = [ 'district_hospital', 'health_center', 'clinic', 'person' ];\n  var idx = types.indexOf(doc.type);\n  var dead = !!doc.date_of_death;\n  if (idx !== -1) {\n    var order = dead + ' ' + idx + ' ' + (doc.name && doc.name.toLowerCase());\n    emit([ doc.type ], order);\n  }\n}"
        },
        "data_records_by_type": {
          "map": "function(doc) {\n  if (doc.type === 'data_record') {\n    emit(doc.form ? 'report' : 'message');\n  }\n}",
          "reduce": "_count"
        },
        "doc_by_type": {
          "map": "function(doc) {\n  if (doc.type === 'translations') {\n    emit([ 'translations', doc.enabled ], {\n      code: doc.code,\n      name: doc.name\n    });\n    return;\n  }\n  emit([ doc.type ]);\n}"
        },
        "doc_summaries_by_id": {
          "map": "function(doc) {\n  var getLineage = function(contact) {\n    var parts = [];\n    while (contact) {\n      if (contact._id) {\n        parts.push(contact._id);\n      }\n      contact = contact.parent;\n    }\n    return parts;\n  };\n\n  var isMissingSubjectError = function(error) {\n    if (error.code !== 'sys.missing_fields' || !error.fields) {\n      return false;\n    }\n\n    if (error.fields.indexOf('patient_id') !== -1 ||\n      error.fields.indexOf('patient_name') !== -1 ||\n      error.fields.indexOf('place_id') !== -1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var getSubject = function(doc) {\n    var subject = {};\n\n    if (doc.patient_id || (doc.fields && doc.fields.patient_id) || doc.place_id) {\n      subject.value = doc.patient_id || (doc.fields && doc.fields.patient_id) || doc.place_id;\n      subject.type = 'reference';\n    } else if (doc.fields && doc.fields.place_id) {\n      subject.value = doc.fields.place_id;\n      subject.type = 'id';\n    } else if (doc.fields && doc.fields.patient_name) {\n      subject.value = doc.fields.patient_name;\n      subject.type = 'name';\n    } else if (doc.errors) {\n      doc.errors.forEach(function(error) {\n        if (isMissingSubjectError(error)) {\n          subject.type = 'unknown';\n        }\n      });\n    }\n\n    return subject;\n  };\n\n  if (doc.type === 'data_record' && doc.form) { // report\n    emit(doc._id, {\n      _rev: doc._rev,\n      from: doc.from || doc.sent_by,\n      phone: doc.contact && doc.contact.phone,\n      form: doc.form,\n      read: doc.read,\n      valid: !doc.errors || !doc.errors.length,\n      verified: doc.verified,\n      reported_date: doc.reported_date,\n      contact: doc.contact && doc.contact._id,\n      lineage: getLineage(doc.contact && doc.contact.parent),\n      subject: getSubject(doc)\n    });\n  } else if (doc.type === 'clinic' ||\n      doc.type === 'district_hospital' ||\n      doc.type === 'health_center' ||\n      doc.type === 'person') { // contact\n    emit(doc._id, {\n      _rev: doc._rev,\n      name: doc.name || doc.phone,\n      phone: doc.phone,\n      type: doc.type,\n      contact: doc.contact && doc.contact._id,\n      lineage: getLineage(doc.parent),\n      simprints_id: doc.simprints_id,\n      date_of_death: doc.date_of_death\n    });\n  }\n}"
        },
        "docs_by_id_lineage": {
          "map": "function(doc) {\n\n  var emitLineage = function(contact, depth) {\n    while (contact) {\n      emit([ doc._id, depth++ ], { _id: contact._id });\n      contact = contact.parent;\n    }\n  };\n\n  var types = [ 'district_hospital', 'health_center', 'clinic', 'person' ];\n\n  if (types.indexOf(doc.type) !== -1) {\n    // contact\n    emitLineage(doc, 0);\n  } else if (doc.type === 'data_record' && doc.form) {\n    // report\n    emit([ doc._id, 0 ]);\n    emitLineage(doc.contact, 1);\n  }\n}"
        },
        "feedback": {
          "map": "function(doc) {\n  if (doc.type === 'feedback') {\n    emit([new Date(doc.meta.time).valueOf()], 1);\n  }\n}"
        },
        "forms": {
          "map": "function(doc) {\n  if (doc.type !== 'form' || !doc._attachments || !doc._attachments.xml) {\n    return;\n  }\n  emit(doc.internalId);\n}"
        },
        "messages_by_contact_date": {
          "map": "function(doc) {\n\n  var getLineage = function(contact) {\n    var lineage = [];\n    while (contact) {\n      if (contact._id) {\n        lineage.push(contact._id);\n      }\n      contact = contact.parent;\n    }\n    return lineage;\n  };\n\n  var emitMessage = function(doc, contact, phone, message) {\n    var from = (contact && contact._id) || phone;\n    var id = from || doc._id;\n    emit([ id, doc.reported_date ], {\n      id: doc._id,\n      from: from,\n      date: doc.reported_date,\n      message: message,\n      contact: contact && contact._id,\n      lineage: getLineage(contact && contact.parent)\n    });\n  };\n\n  if (doc.type === 'data_record' && !doc.form) {\n    if (doc.kujua_message) {\n      // outgoing\n      doc.tasks.forEach(function(task) {\n        var message = task.messages[0];\n        emitMessage(doc, message.contact, message.to, message.message);\n      });\n    } else if (doc.sms_message) {\n      // incoming\n      emitMessage(doc, doc.contact, doc.from, doc.sms_message.message);\n    }\n  }\n}",
          "reduce": "function(key, values) {\n  var latest = { date: 0 };\n  values.forEach(function(value) {\n    if (value.date > latest.date) {\n      latest = value;\n    }\n  });\n  if (latest.message) {\n    latest.message = latest.message.replace(/\\n+\\t+/g, ' ');\n    var code = latest.message.charCodeAt(49);\n    var endPoint = 50;\n    if (0xD800 <= code && code <= 0xDBFF) {\n      // trim off the first half of the unicode character to avoid corruption\n      endPoint = 49;\n    }\n    latest.message = latest.message.substr(0, endPoint);\n  }\n  return latest;\n}"
        },
        "registered_patients": {
          "map": "// NB: This returns *registrations* for patients. If patients are created by\n//     means other then sending in a registration report (eg created in the UI)\n//     they will not show up in this view.\n//\n//     For a view with all patients by their shortcode, use:\n//        medic/patient_by_patient_shortcode_id\nfunction(doc) {\n  var patientId = doc.patient_id || (doc.fields && doc.fields.patient_id);\n  if (doc.form &&\n      (!doc.errors || doc.errors.length === 0) &&\n      patientId &&\n      doc.transitions &&\n      doc.transitions.registration &&\n      doc.transitions.registration.ok) {\n    emit(String(patientId));\n  }\n}"
        },
        "reports_by_date": {
          "map": "function(doc) {\n  if (doc.type === 'data_record' && doc.form) {\n    emit([doc.reported_date], doc.reported_date);\n  }\n}"
        },
        "reports_by_form_year_month_places": {
          "map": "// data record must adhere to property name of `month`\nfunction(doc) {\n  if (doc.type === 'data_record' &&\n      doc.form &&\n      doc.fields &&\n      doc.fields.year &&\n      doc.fields.month) {\n    var year = parseInt(doc.fields.year, 10);\n    var month = parseInt(doc.fields.month, 10);\n    var clinic = doc.contact && doc.contact.parent;\n    var healthCenter = clinic && clinic.parent;\n    var district = healthCenter && healthCenter.parent;\n    emit(\n      [ doc.form, year, month ],\n      {\n        isValid: (doc.errors && doc.errors.length === 0),\n        clinicId: clinic && clinic._id,\n        healthCenterId: healthCenter && healthCenter._id,\n        districtId: district && district._id,\n        month: month\n      }\n    );\n  }\n}"
        },
        "reports_by_form_year_week_places": {
          "map": "// data record must adhere to property name of `week` or `week_number`\nfunction(doc) {\n  if (doc.type === 'data_record' &&\n      doc.form &&\n      doc.fields &&\n      doc.fields.year &&\n      (doc.fields.week || doc.fields.week_number)) {\n    var year = parseInt(doc.fields.year, 10);\n    var week = parseInt(doc.fields.week || doc.fields.week_number, 10);\n    var clinic = doc.contact && doc.contact.parent;\n    var healthCenter = clinic && clinic.parent;\n    var district = healthCenter && healthCenter.parent;\n    emit(\n      [ doc.form, year, week ],\n      {\n        isValid: (doc.errors && doc.errors.length === 0),\n        clinicId: clinic && clinic._id,\n        healthCenterId: healthCenter && healthCenter._id,\n        districtId: district && district._id,\n        weekNumber: week\n      }\n    );\n  }\n}"
        },
        "reports_by_form": {
          "map": "function(doc) {\n  if (doc.type === 'data_record' && doc.form) {\n    emit([doc.form], doc.reported_date);\n  }\n}",
          "reduce": "function() {\n  return true;\n}"
        },
        "reports_by_freetext": {
          "map": "function(doc) {\n  var skip = [ '_id', '_rev', 'type', 'refid', 'content' ];\n\n  var usedKeys = [];\n  var emitMaybe = function(key, value) {\n    if (usedKeys.indexOf(key) === -1 && // Not already used\n        key.length > 2 // Not too short\n    ) {\n      usedKeys.push(key);\n      emit([key], value);\n    }\n  };\n\n  var emitField = function(key, value, reportedDate) {\n    if (!key || !value) {\n      return;\n    }\n    key = key.toLowerCase();\n    if (skip.indexOf(key) !== -1 || /_date$/.test(key)) {\n      return;\n    }\n    if (typeof value === 'string') {\n      value = value.toLowerCase();\n      value.split(/\\s+/).forEach(function(word) {\n        emitMaybe(word, reportedDate);\n      });\n    }\n    if (typeof value === 'number' || typeof value === 'string') {\n      emitMaybe(key + ':' + value, reportedDate);\n    }\n  };\n\n  if (doc.type === 'data_record' && doc.form) {\n    Object.keys(doc).forEach(function(key) {\n      emitField(key, doc[key], doc.reported_date);\n    });\n    if (doc.fields) {\n      Object.keys(doc.fields).forEach(function(key) {\n        emitField(key, doc.fields[key], doc.reported_date);\n      });\n    }\n    if (doc.contact && doc.contact._id) {\n      emitMaybe('contact:' + doc.contact._id.toLowerCase(), doc.reported_date);\n    }\n  }\n}"
        },
        "reports_by_verification": {
          "map": "function(doc) {\n  if (doc.type === 'data_record' && doc.form) {\n    emit([doc.verified], doc.reported_date);\n  }\n}"
        },
        "total_clinics_by_facility": {
          "map": "function(doc) {\n  if (doc.type === 'clinic') {\n\n    var districtId = doc.parent && doc.parent.parent && doc.parent.parent._id,\n        healthCenterId = doc.parent && doc.parent._id;\n\n    emit([ districtId, healthCenterId, doc._id, 0 ]);\n    if (doc.contact && doc.contact._id) {\n      emit([ districtId, healthCenterId, doc._id, 1 ], { _id: doc.contact._id });\n    }\n    var index = 2;\n    var parent = doc.parent;\n    while(parent) {\n      if (parent._id) {\n        emit([ districtId, healthCenterId, doc._id, index++ ], { _id: parent._id });\n      }\n      parent = parent.parent;\n    }\n  }\n}"
        },
        "reports_by_validity": {
          "map": "function(doc) {\n  if (doc.type === 'data_record' && doc.form) {\n    emit([!doc.errors || doc.errors.length === 0], doc.reported_date);\n  }\n}"
        },
        "reports_by_place": {
          "map": "function(doc) {\n  if (doc.type === 'data_record' && doc.form) {\n    var place = doc.contact && doc.contact.parent;\n    while (place) {\n      if (place._id) {\n        emit([ place._id ], doc.reported_date);\n      }\n      place = place.parent;\n    }\n  }\n}"
        },
        "reports_by_subject": {
          "map": "function(doc) {\n  if (doc.type === 'data_record' && doc.form) {\n    var patient = doc.patient_id || (doc.fields && doc.fields.patient_id);\n    if (patient) {\n      emit([ patient ], doc.reported_date);\n    }\n    var place = doc.place_id || (doc.fields && doc.fields.place_id);\n    if (place) {\n      emit([ place ], doc.reported_date);\n    }\n  }\n}"
        }
      }
    },
    {
      "_id": "_design/medic-conflicts",
      "views": {
        "conflicts": {
          "map": "function(doc) {\n  if (doc._conflicts) {\n    emit(doc._conflicts);\n  }\n}"
        }
      }
    }
  ]
}