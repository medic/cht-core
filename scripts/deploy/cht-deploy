#!/usr/bin/env node

import { install } from './src/install.js';
import fs from 'fs';
import semver from 'semver';
import path from 'path';

import { dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const validateNodeVersion = function() {
  const packageJsonPath = path.resolve(__dirname, 'package.json');

  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const requiredNodeVersion = packageJson.engines && packageJson.engines.node;

    if (requiredNodeVersion && !semver.satisfies(process.version, requiredNodeVersion)) {
      console.error(`Invalid Node.js version. Required: ${requiredNodeVersion}. Current: ${process.version}`);
      process.exit(1);
    }
  } catch (err) {
    console.error('Error reading package.json:', err.message);
    process.exit(1);
  }
};

const validateArguments = function() {
  const args = process.argv.slice(2);
  if (args.length < 2 || args[0] !== '-f' || !args[1]) {
    console.error('No values file provided. Please specify a values file using -f <file>');
    process.exit(1);
  }
  if (validateFileExists(args[1])) {
    return args;
  }
};

const validateFileExists = function(filePath) {
  try {
    fs.accessSync(filePath);
    return true;
  } catch (err) {
    console.error(`File not found: ${filePath}`);
    process.exit(1);
  }
};

const runInstallScript = async function(args) {
  try {
    const valuesFilePath = args[1];
    await install(valuesFilePath);
  } catch (err) {
    console.error('Error executing the install script:', err.message);
    console.error(JSON.stringify(err));
    process.exit(1);
  }
};

const main = async function() {
  validateNodeVersion();
  const args = validateArguments();
  await runInstallScript(args);
};

if (import.meta.url === `file://${process.argv[1]}`) { //Make sure the script is being run directly and not being imported
  main().catch((err) => {
    console.error('An error occurred:', err.message);
    console.error(JSON.stringify(err));
    process.exit(1);
  });
}

export {
  main,
  validateNodeVersion,
  validateArguments,
  validateFileExists,
  runInstallScript
};
