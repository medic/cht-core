# Setting up as a java project allows us to ensure that the JRE/JDK version used
# is actually compatible with webdriver-manager.
language: java
sudo: true
jdk: oraclejdk9
dist: xenial

addons:
  chrome: 'stable'

services:
  # docker is used for couchdb 2.0 (not currently available as a travis service)
  - docker

env:
  matrix:
    - TEST_SUITE=integration NODE_VERSION=8
    - TEST_SUITE=integration NODE_VERSION=10
    - TEST_SUITE=integration NODE_VERSION=12
    - TEST_SUITE=performance NODE_VERSION=12
  global:
    - COUCH_URL=http://admin:pass@localhost:5984/medic-test
    - COUCH_NODE_NAME=nonode@nohost
    - BUILDS_SERVER=_couch/builds_testing
    - STAGING_SERVER=_couch/builds
    # AWS Access Key Id and AWS Secret Access Key encrypted by travis to access the S3 buckets where reports and screenshots are saved
    - secure: Xpx2330cO0bn0vuotwwZaLOcnez63osHpbD3T4khUOsUxiSsJPc1eE3kY7MEyau0Pfd+M0rL8ens447BdgO2NlAXfs/Ge5AlDK0ATQJcwoBKnO8ex3wPXCelCfYjR8NWB/xN8eSHKxgW0Hv0JDFa+ruofnGkElgGVzJL7ib8iUo=
    - secure: SZDBgH8YzCSTrbQuOFsa2VTVpFzuNTUIJmStFMVX/w304BDa2uwWnCnBTwFua7PoDQDJQt5sEbqldhHjTkkdxlLIeuDP8AGtqnFXPPpvrAyAK3VzEFfKn3W+CruG5aJ2+YqjY9lbVrXyw4LC5ywAyZzUgVqEru7usHcHxOkX7hE=

before_install:
  # External contributors can't access the secured $UPLOAD_URL environment variable
  - |
    if [[ -z "$UPLOAD_URL" ]]; then
      export UPLOAD_URL=https://staging.dev.medicmobile.org
      export BUILDS_SERVER=_couch/builds_external
    fi
  - export PATH=$PATH:$HOME/.local/bin
  - export PATH=$HOME/.npm/bin:$PATH
  - ./scripts/travis/couch-start
  - sudo apt-get install xsltproc

install: nvm install $NODE_VERSION

before_script:
  - mkdir tests/logs
  - nvm use $NODE_VERSION
  - ./scripts/travis/npm-init
  - npm install -g grunt-cli
  - npm install -g horticulturalist
  - ./scripts/travis/couch-config
  - echo "HORTI_BUILDS_SERVER=${UPLOAD_URL}/${BUILDS_SERVER}"
  - echo "--install=medic:medic:test-${TRAVIS_BUILD_NUMBER}"
  - echo "COUCH_URL=${COUCH_URL}"
  - curl ${COUCH_URL}
  - echo "COUCH_URL=$COUCH_URL HORTI_BUILDS_SERVER=$UPLOAD_URL/$BUILDS_SERVER"
  - COUCH_URL=$COUCH_URL HORTI_BUILDS_SERVER=$UPLOAD_URL/$BUILDS_SERVER horti --local --install=medic:medic:test-$TRAVIS_BUILD_NUMBER > tests/logs/horti.log &

script:
  - |
    if [[ "$TEST_SUITE" = 'integration' ]]; then
      node --stack_size=10000 `which grunt` ci-e2e
    elif [[ "$TEST_SUITE" = 'performance' ]]; then
      node --stack_size=10000 `which grunt` ci-performance
    else
      echo "ERROR No or unknown value for TEST_SUITE env var ('${TEST_SUITE}')."
      exit 1
    fi

stages:
  - compile
  - test
  - publish

jobs:
  include:
    - stage: compile
      env: NODE_VERSION=12
      before_script:
        - ./scripts/travis/npm-init
        - npm install -g grunt-cli
        - ./scripts/travis/couch-config
        - mkdir tests/logs
      script:
        - node --stack_size=10000 `which grunt` ci-compile
        - node --stack_size=10000 `which grunt` publish-for-testing
      after_failure: # overwrite default
    - stage: publish
      if: type != pull_request
      env: NODE_VERSION=12
      before_script: # overwrite default
      script:
        - cd scripts/travis
        - npm install
        - node ./publish.js
        - cd ../../
      after_failure: # overwrite default
      after_script:
        - node scripts/travis/cleanup.js # clean up testing ddoc

after_failure:
  - node scripts/travis/cleanup.js # clean up testing ddoc
  - pip install --user awscli
  - |
    (cd tests/logs
      for log in $(ls *.log); do
        echo "--------- $log ----------"
        tail "$log"
        echo "-------------------------"
      done
    )

    [[ "$TRAVIS_BUILD_STAGE_NAME" = "test" ]] || return

    if [[ "$TRAVIS_PULL_REQUEST" = true ]]; then
      S3_PATH=s3://medic-e2e/PR_$TRAVIS_PULL_REQUEST
    else
      S3_PATH=s3://medic-e2e/BUILD_$TRAVIS_BUILD_NUMBER/JOB_$TRAVIS_JOB_NUMBER
    fi

    echo "Uploading logs and screenshots to ${S3_PATH}..."

    docker logs couch > tests/logs/couch.log 2>&1

    aws s3 cp tests/results "$S3_PATH"/test-results --recursive
    aws s3 cp tests/logs "$S3_PATH"/ --recursive

notifications:
  webhooks:
    urls:
      - https://hooks.zapier.com/hooks/catch/3653132/j182m9/
    on_success: change
    on_failure: always
    on_start:   never
    on_cancel:  never
    on_error:   always