# Setting up as a java project allows us to ensure that the JRE/JDK version used
# is actually compatible with webdriver-manager.
language: java
sudo: true
jdk:
  - oraclejdk8

addons:
  chrome: "stable"

services:
  # docker is used for couchdb 2.0 (not currently available as a travis service)
  - docker

env:
  matrix:
  - NODE_VERSION=8 TEST_SUITE=normal
  - NODE_VERSION=9 TEST_SUITE=normal
  - NODE_VERSION="lts/*" TEST_SUITE=performance
  global:
  - COUCH_URL=http://admin:pass@localhost:5984/medic
  - API_URL=http://admin:pass@localhost:5988
  - COUCH_NODE_NAME=nonode@nohost
  #AWS Access Key Id and AWS Secret Access Key encrypted by travis to access the S3 buckets where reports and screenshots are saved
  - secure: TR1UN2r3beDtIF+VJpLF2ocTv/uxuOKyVWWhzMLre0ZrrBaIP1sLZV7Z4S/km5M92EfPgGW87BogdWE/R+kTTRiPTCbFB/U/3jFKxEZRXKST66YK5JMwsYqb17UtZtFdqEtO9GGbAVzXwpZfMMoXvlKNrors2W32xBm2uIkOSpI=
  - secure: Q8RH65NClRBryxfvlwHQjeR4wGs+GXeUBRIBd1kspAM7Uv+5K3iP+q/TPCIrTL/OpJ5tyCYfeq5hKIFFwrY3JikNXnyHICOjXPE6zSLUm8E8NHaP/orPNWjze2x4yDSRCifqzr2ZiXVq9sxlZfNbZ9eyJxpPFTYDSpuN9T5UEE0=

matrix:
  allow_failures:
    - env: NODE_VERSION="lts/*" TEST_SUITE=performance

before_install:
  # start couchdb 2.x docker instance
  - docker run -d -p 5984:5984 --name couch couchdb:2
  - echo "Starting CouchDB 2.x"
  - until nc -z localhost 5984; do sleep 1; done
  - echo "CouchDB Started"
  - pip install --user awscli
  - export PATH=$PATH:$HOME/.local/bin
  - curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.7.0
  - export PATH=$HOME/.yarn/bin:$PATH

install:
  nvm install $NODE_VERSION

before_script:
  - mkdir tests/logs
  - nvm use $NODE_VERSION
  - yarn -v
  - yarn install
  - yarn list || true
  # Create couchdb system tables (this has to be done manually on couchdb 2.0)
  - curl -X PUT http://127.0.0.1:5984/{_users,_replicator,_global_changes,_metadata,admins}
  - curl -X PUT localhost:5984/medic
  - yarn global add grunt-cli --ignore-engines
  - cd shared-libs/phone-number && yarn install && cd ../..
  - node --stack_size=10000 `which grunt` ci-build

script:
  - |
    if [[ "$TEST_SUITE" = 'normal' ]]; then
      node --stack_size=10000 `which grunt` ci-unit &&
      node --stack_size=10000 `which grunt` ci-integration-e2e
    elif [[ "$TEST_SUITE" = 'performance' ]]; then
      node --stack_size=10000 `which grunt` ci-performance
    else
      echo "ERROR No or unknown value for TEST_SUITE env var ('${TEST_SUITE}')."
      exit 1
    fi

jobs:
  include:
    - if: type != pull_request
      stage: "Publish binaries"
      script: node --stack_size=10000 `which grunt` publish
      env: NODE_VERSION=8 PUBLISH_TO=horti

after_failure:
  - |
      (cd tests/logs
        for log in $(ls *.log); do
          echo "---------- $log ----------"
          tail "$log"
          echo "--------------------------"
        done
      )

      [[ "$TRAVIS_BUILD_STAGE_NAME" = "Test" ]] || return

      if [[ "$TRAVIS_PULL_REQUEST" = true ]]; then
        S3_PATH=s3://medic-e2e/PR_$TRAVIS_PULL_REQUEST
      else
        S3_PATH=s3://medic-e2e/BUILD_$TRAVIS_BUILD_NUMBER/JOB_$TRAVIS_JOB_NUMBER
      fi

      echo "Uploading logs and screenshots to ${S3_PATH}..."

      docker logs couch >tests/logs/couch.log 2>&1

      aws s3 cp tests/results "$S3_PATH"/test-results --recursive
      aws s3 cp tests/logs "$S3_PATH"/ --recursive

notifications:
  webhooks:
    urls:
      - https://medic.slack.com/services/hooks/travis?token=xcYT8yusfEdSwLskhBxK4Vwj
    on_success: change
    on_failure: always
  email:
    recipients:
      - dev@medicmobile.org
